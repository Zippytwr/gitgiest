package logparser

import (
	"fmt"
	"strings"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–∞—Ö
type Commit struct {
	Hash    string
	Author  string
	Date    string
	Message string
}

// –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ git –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–∞—Ö
func ParseGitLog(output []byte) []Commit {
	lines := strings.Split(string(output), "\n")
	var commits []Commit
	for _, line := range lines {
		parts := strings.SplitN(line, "|", 4)
		if len(parts) < 4 {
			continue
		}
		commits = append(commits, Commit{
			Hash:    parts[0],
			Author:  parts[1],
			Date:    parts[2],
			Message: parts[3],
		})
	}
	return commits
}

// –í—ã–≤–æ–¥ –∫–æ–º–º–∏—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func PrintCommits(commits []Commit) {
	for _, commit := range commits {
		fmt.Printf("\033[1;34müîπ %s\033[0m\n", commit.Message)
		fmt.Printf("   \033[1;33m%s\033[0m by \033[1;32m%s\033[0m\n", commit.Date, commit.Author)
		fmt.Printf("   üîó \033[2m%s\033[0m\n\n", commit.Hash[:8])
	}
}
