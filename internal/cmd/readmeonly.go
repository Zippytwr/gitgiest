package cmd

import (
	"fmt"
	"gitgeist/internal/git"
	"github.com/urfave/cli/v2"
	"log"
	"os/exec"
	"strings"
)

var readmeonly = &cli.Command{
	Name:  "readme",
	Usage: "Show readme only workers",
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name:  "repo",
			Usage: "Path to the git repository",
		},
	},
	Action: func(c *cli.Context) error {
		repoPath := c.String("repo")
		if repoPath == "" {
			repoPath = "./"
		}
		output, err := git.RunGitReadmeOnly(repoPath)
		if err != nil {
			log.Fatal(err)
		}
		outputString := string(output)
		result := strings.Split(outputString, "\n")
		fmt.Println("üìù –ö–æ–º–º–∏—Ç—ã, –∏–∑–º–µ–Ω—è—é—â–∏–µ —Ç–æ–ª—å–∫–æ README.md\n")
		for _, commitHash := range result {
			if commitHash == "" {
				continue
			}
			cmdAuthor := exec.Command("git", "show", "-s", "--format=%an", commitHash)
			authorBytes, err := cmdAuthor.Output()
			author := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
			if err == nil {
				author = strings.TrimSpace(string(authorBytes))
			}
			cmd := exec.Command("git", "show", "--name-only", "--pretty=", commitHash)
			out, err := cmd.Output()
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ git show:", err)
				continue
			}

			files := strings.Split(strings.TrimSpace(string(out)), "\n")
			if len(files) == 1 && strings.ToLower(files[0]) == "readme.md" {

				fmt.Printf("\033[1;33m‚ö†Ô∏è  %s ‚Äî –û–±–Ω–∞—Ä—É–∂–µ–Ω –õ–µ–Ω—Ç—è–π! (%s)\n   üõãÔ∏è –ó–≤–∞–Ω–∏–µ: README-only Commando\033[0m\n", commitHash, author)
			} else {
				fmt.Printf("\033[1;32m‚úÖ %s ‚Äî –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, %s! –†–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã.\033[0m\n", commitHash, author)
			}
		}
		return nil
	},
}
